// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// ConfigDao is the manager for logic model data accessing and custom defined data operations functions management.
type ConfigDao struct {
	Table   string        // Table is the underlying table name of the DAO.
	Group   string        // Group is the database configuration group name of current DAO.
	Columns ConfigColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// ConfigColumns defines and stores column names for table sys_config.
type ConfigColumns struct {
	Id           string // 主键
	Name         string // 名称
	Key          string // 键
	Value        string // 值
	Code         string // 编码
	DataType     string // 数据类型//radio/1,KV,2,字典,3,数组
	ParentId     string // 类型
	ParentKey    string //
	Sort         string // 排序号
	ProjectId    string // 项目ID
	CopyStatus   string // 拷贝状态 1 拷贝  2  不拷贝
	ChangeStatus string // 1 不可更改 2 可以更改
	Enable       string // 是否启用//radio/1,启用,2,禁用
	UpdateTime   string // 更新时间
	UpdateId     string // 更新人
	CreateTime   string // 创建时间
	CreateId     string // 创建者
}

//  configColumns holds the columns for table sys_config.
var configColumns = ConfigColumns{
	Id:           "id",
	Name:         "name",
	Key:          "key",
	Value:        "value",
	Code:         "code",
	DataType:     "data_type",
	ParentId:     "parent_id",
	ParentKey:    "parent_key",
	Sort:         "sort",
	ProjectId:    "project_id",
	CopyStatus:   "copy_status",
	ChangeStatus: "change_status",
	Enable:       "enable",
	UpdateTime:   "update_time",
	UpdateId:     "update_id",
	CreateTime:   "create_time",
	CreateId:     "create_id",
}

// NewConfigDao creates and returns a new DAO object for table data access.
func NewConfigDao() *ConfigDao {
	return &ConfigDao{
		Group:   "default",
		Table:   "sys_config",
		Columns: configColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *ConfigDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *ConfigDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *ConfigDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
