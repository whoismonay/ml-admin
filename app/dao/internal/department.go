// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// DepartmentDao is the manager for logic model data accessing and custom defined data operations functions management.
type DepartmentDao struct {
	Table   string            // Table is the underlying table name of the DAO.
	Group   string            // Group is the database configuration group name of current DAO.
	Columns DepartmentColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// DepartmentColumns defines and stores column names for table sys_department.
type DepartmentColumns struct {
	Id         string // 主键
	ParentId   string // 上级机构
	Name       string // 部门/11111
	Code       string // 机构编码
	Sort       string // 序号
	Linkman    string // 联系人
	LinkmanNo  string // 联系人电话
	Remark     string // 机构描述
	Enable     string // 是否启用//radio/1,启用,2,禁用
	UpdateTime string // 更新时间
	UpdateId   string // 更新人
	CreateTime string // 创建时间
	CreateId   string // 创建者
}

//  departmentColumns holds the columns for table sys_department.
var departmentColumns = DepartmentColumns{
	Id:         "id",
	ParentId:   "parent_id",
	Name:       "name",
	Code:       "code",
	Sort:       "sort",
	Linkman:    "linkman",
	LinkmanNo:  "linkman_no",
	Remark:     "remark",
	Enable:     "enable",
	UpdateTime: "update_time",
	UpdateId:   "update_id",
	CreateTime: "create_time",
	CreateId:   "create_id",
}

// NewDepartmentDao creates and returns a new DAO object for table data access.
func NewDepartmentDao() *DepartmentDao {
	return &DepartmentDao{
		Group:   "default",
		Table:   "sys_department",
		Columns: departmentColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *DepartmentDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *DepartmentDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *DepartmentDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
