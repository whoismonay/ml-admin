// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// LogDao is the manager for logic model data accessing and custom defined data operations functions management.
type LogDao struct {
	Table   string     // Table is the underlying table name of the DAO.
	Group   string     // Group is the database configuration group name of current DAO.
	Columns LogColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// LogColumns defines and stores column names for table sys_log.
type LogColumns struct {
	Id         string // 主键
	LogType    string // 类型
	OperObject string // 操作对象
	OperTable  string // 操作表
	OperId     string // 操作主键
	OperType   string // 操作类型
	OperRemark string // 操作备注
	Enable     string // 是否启用//radio/1,启用,2,禁用
	UpdateTime string // 更新时间
	UpdateId   string // 更新人
	CreateTime string // 创建时间
	CreateId   string // 创建者
}

//  logColumns holds the columns for table sys_log.
var logColumns = LogColumns{
	Id:         "id",
	LogType:    "log_type",
	OperObject: "oper_object",
	OperTable:  "oper_table",
	OperId:     "oper_id",
	OperType:   "oper_type",
	OperRemark: "oper_remark",
	Enable:     "enable",
	UpdateTime: "update_time",
	UpdateId:   "update_id",
	CreateTime: "create_time",
	CreateId:   "create_id",
}

// NewLogDao creates and returns a new DAO object for table data access.
func NewLogDao() *LogDao {
	return &LogDao{
		Group:   "default",
		Table:   "sys_log",
		Columns: logColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *LogDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *LogDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *LogDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
