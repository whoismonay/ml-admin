// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// UserDao is the manager for logic model data accessing and custom defined data operations functions management.
type UserDao struct {
	Table   string      // Table is the underlying table name of the DAO.
	Group   string      // Group is the database configuration group name of current DAO.
	Columns UserColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// UserColumns defines and stores column names for table sys_user.
type UserColumns struct {
	Id           string // 主键
	Uuid         string // UUID
	Username     string // 登录名/11111
	Password     string // 密码
	Salt         string // 密码盐
	RealName     string // 真实姓名
	DepartId     string // 部门/11111/dict
	UserType     string // 类型//select/1,管理员,2,普通用户,3,前台用户,4,第三方用户,5,API用户
	Status       string // 状态
	Thirdid      string // 第三方ID
	Endtime      string // 结束时间
	Email        string // email
	Tel          string // 手机号
	Address      string // 地址
	TitleUrl     string // 头像地址
	Remark       string // 说明
	Theme        string // 主题
	BackSiteId   string // 后台选择站点ID
	CreateSiteId string // 创建站点ID
	ProjectId    string // 项目ID
	ProjectName  string // 项目名称
	Enable       string // 是否启用//radio/1,启用,2,禁用
	UpdateTime   string // 更新时间
	UpdateId     string // 更新人
	CreateTime   string // 创建时间
	CreateId     string // 创建者
}

//  userColumns holds the columns for table sys_user.
var userColumns = UserColumns{
	Id:           "id",
	Uuid:         "uuid",
	Username:     "username",
	Password:     "password",
	Salt:         "salt",
	RealName:     "real_name",
	DepartId:     "depart_id",
	UserType:     "user_type",
	Status:       "status",
	Thirdid:      "thirdid",
	Endtime:      "endtime",
	Email:        "email",
	Tel:          "tel",
	Address:      "address",
	TitleUrl:     "title_url",
	Remark:       "remark",
	Theme:        "theme",
	BackSiteId:   "back_site_id",
	CreateSiteId: "create_site_id",
	ProjectId:    "project_id",
	ProjectName:  "project_name",
	Enable:       "enable",
	UpdateTime:   "update_time",
	UpdateId:     "update_id",
	CreateTime:   "create_time",
	CreateId:     "create_id",
}

// NewUserDao creates and returns a new DAO object for table data access.
func NewUserDao() *UserDao {
	return &UserDao{
		Group:   "default",
		Table:   "sys_user",
		Columns: userColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *UserDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *UserDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *UserDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
